import { slugify } from '~/utils/formatters'
import { boardModel } from '~/models/boardModel'
import ApiError from '~/utils/ApiError'
import { StatusCodes } from 'http-status-codes'
import { cloneDeep } from 'lodash'
import { columnModel } from '~/models/columnModel'
import { cardModel } from '~/models/cardModel'

const createNew = async(reqBody) => {
  try {
    // x·ª≠ l√Ω d·ªØ li·ªáu t√πy ƒë·∫∑c th√π d·ª± √°n
    const newBoard = {
      ...reqBody,
      slug: slugify(reqBody.title)
    }

    // G·ªçi t·ªõi t√¢ng model ƒë·ªÉ s·ª≠ l√Ω b·∫£ng ghi newBoard v√†o trong database
    const createdBoard = await boardModel.createNew(newBoard)

    // L·∫•y b·∫£n ghi board sau khi g·ªçi (T√πy m·ª•c ƒë√≠ch d·ª± √°n m√† c√≥ c·∫ßn b∆∞·ªõc n√†y hay kh√¥ng)
    const getNewBoard = await boardModel.findOneById(createdBoard.insertedId)

    return getNewBoard
  } catch (error) {
    console.log('üöÄ ~ createNew ~ error:', error)
    throw error
  }
}

const getDetails = async(boardId) => {
  try {

    const board = await boardModel.getDetails(boardId)
    if (!board) {
      throw new ApiError (StatusCodes.NOT_FOUND, 'Board not found!')
    }

    // T·∫°o ra m·ªôt c√°i board m·ªõi ƒë·ªÉ x·ª≠ l√Ω, kh√¥ng ·∫£nh h∆∞·ªõng v·ªõi c√°i ban ƒë·∫ßu
    const resBoard = cloneDeep(board)

    resBoard.columns.forEach(c => {
      c.cards = resBoard.cards.filter(card => card.columnId.equals(c._id))
      // c.cards = resBoard.cards.filter(card => card.columnsId.toString() === c._id.toString())
    })

    // x√≥a m·∫£ng card ra kh·ªèi board ban ƒë·∫ßu
    delete resBoard.cards

    return resBoard
  } catch (error) {
    throw error
  }
}

const update = async(boardId, reqBody) => {
  try {
    const updateData = {
      ...reqBody,
      updateAt: Date.now()
    }
    const updatedBoard = await boardModel.update(boardId, updateData)

    return updatedBoard
  } catch (error) {
    throw error
  }
}

const moveCardToDifferentColumn = async( reqBody) => {
  try {


    //  B1: c·∫≠p nh·∫≠t m·∫£ng CardOrderIds c·ªßa column ban ƒë·∫ßu ch·ª©a n√≥ (Hi·ªÉu b·∫£n ch·∫•t l√† x√≥a Id c·∫£u card ra kh·ªïi m·∫£ng)
    await columnModel.update(reqBody.prevColumnId, {
      cardOrderIds: reqBody.prevCardOrderIds,
      updatedAt: Date.now()
    })
    //  B2: C·∫≠p nh·∫≠t m·∫£ng cardOrderIds c·ªßa column ti·∫øp theo (Hi·ªÉu b·∫£n ch·∫•t l√† th√™m _id  c·ªßa card v√†o m·∫£ng)
    await columnModel.update(reqBody.nextColumnId, {
      cardOrderIds: reqBody.nextCardOrderIds,
      updatedAt: Date.now()
    })
    //  B3: c·∫≠p nh·∫≠t l·∫°i tr∆∞·ªùng columnId card ƒë√£ k√©o
    await cardModel.update(reqBody.curentCardId, {
      columnId: reqBody.nextColumnId
    })

    return { updateResult: 'Succesfully!' }
  } catch (error) {
    throw error
  }
}

export const boardService = {
  createNew,
  getDetails,
  update,
  moveCardToDifferentColumn
}