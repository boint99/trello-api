import bcryptjs from 'bcryptjs'
import { StatusCodes } from 'http-status-codes'
import { userModel } from '~/models/userModel'
import ApiError from '~/utils/ApiError'
import { v4 as uuidv4 } from 'uuid'
import { pickUser } from '~/utils/formatters'
import bcrypt from 'bcryptjs'
import { jwtProvider } from '~/providers/jwtProvider'
import { env } from '~/config/environment'
import { CloundinaryProvider } from '~/providers/CloundinaryProvider'
// import { WEBSITE_DOMAIN } from '~/utils/constants'
// import { brevoProvider } from '~/providers/Brevoprovider'

const createNew = async (reqBody) => {
  try {
    //Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng
    const exsitUser = await userModel.findOneByEmail(reqBody.email)
    if (exsitUser) {
      throw new ApiError (StatusCodes.CONFLICT, 'Email already exists!')
    }
    // t·∫°o data l∆∞u v√†o database
    // nameFromEmail: n·∫øu email l√† trung boint@gmail.com th√¨ s·∫Ω l·∫•y ƒë∆∞·ª£c boint
    const nameFromEmail = reqBody.email.split('@')[0]
    const newUser = {
      email: reqBody.email,
      password: bcryptjs.hashSync(reqBody.password, 8),
      username: nameFromEmail,
      displayName: nameFromEmail,

      verifyToken: uuidv4(),
      isActive: true
    }
    // Th·ª±c hi·ªán l∆∞u th√¥ng tin v√†o DB
    // G·ªçi t·ªõi t√¢ng model ƒë·ªÉ s·ª≠ l√Ω b·∫£ng ghi newBoard v√†o trong database
    const createdUser = await userModel.createNew(newUser)

    // L·∫•y b·∫£n ghi board sau khi g·ªçi (T√πy m·ª•c ƒë√≠ch d·ª± √°n m√† c√≥ c·∫ßn b∆∞·ªõc n√†y hay kh√¥ng)
    const getNewUser = await userModel.findOneById(createdUser.insertedId)

    // G·ª≠i email cho ng∆∞·ªùi d√πng t·∫°o t√†i kho·∫£ng

    // T√≠nh nƒÉng g·ª≠i email b·ªã l·ªó ·ªü api brove n√™n t·∫°m th·ªùi  off
    // const verifyTokenLink = `http://${WEBSITE_DOMAIN}/account/verification?email=${getNewUser.email}&token=${getNewUser.verifyToken}`

    // const customsubject = 'Please verify your email  before using our services'
    // const htmlContent = `
    //   <h3>Here is your verification link: </h3>
    //   <h3>${verifyTokenLink}</h3>
    // `

    // //   g·ªçi t·ªõi provider
    // await brevoProvider.sendEmail(getNewUser.email, customsubject, htmlContent)
    // tr·∫£ v·ªÅ d·ªØ li·ªáu
    return pickUser(getNewUser)
  } catch (error) {
    throw error
  }
}

const verifyAccount = async(reqBody) => {
  try {
    const exsitUser = await userModel.findOneByEmail(reqBody.email)
    if (!exsitUser) {
      throw new ApiError (StatusCodes.NOT_FOUND, 'Email already exists!')
    }
    if (exsitUser.isActive ) throw new ApiError (StatusCodes.NOT_ACCEPTABLE, 'Your account is alreadey active!')

    if (reqBody.token !== exsitUser) throw new ApiError (StatusCodes.NOT_ACCEPTABLE, 'token not valid already active!')
    const updateData = {
      isActive: true,
      verifyAccount: null
    }
    console.log('üöÄ ~ verifyAccount ~ updateData:', updateData)
    const updateUser = await userModel.update(exsitUser._id, updateData )
    console.log('üöÄ ~ verifyAccount ~ updateUser:', updateUser)
  } catch (error) {
    throw error
  }
}


const login = async (reqBody) => {
  try {
    // T√¨m user theo email
    const existUser = await userModel.findOneByEmail(reqBody.email)
    console.log('üöÄ ~ login ~ existUser:', existUser)

    if (!existUser) {
      throw new ApiError(StatusCodes.NOT_FOUND, 'Account not found')
    }

    if (!existUser.isActive) {
      throw new ApiError(StatusCodes.NOT_ACCEPTABLE, 'Your account is not active')
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u
    const isMatch = bcrypt.compareSync(reqBody.password, existUser.password)
    if (!isMatch) {
      throw new ApiError(StatusCodes.NOT_ACCEPTABLE, 'Email or password is incorrect')
    }

    //  N·∫øu token ok
    // T·∫°o th√¥ng tin ƒë√≠nh k√®m ttrong jwt
    const userInfo = {
      _id:existUser._id,
      email: existUser.email

    }
    // t·∫°o 2 lo·∫°i

    const accessToken = await jwtProvider.generateToken(
      userInfo,
      env.ACCESS_TOKEN_SECRET_SIGNATURE,
      env.ACCESS_TOKEN_LIFE
    )
    const refreshToken = await jwtProvider.generateToken(
      userInfo,
      env.REFRESH_TOKEN_SECRET_SIGNATURE,
      env.REFRESH_TOKEN_LIFE
    )
    // N·∫øu pass ƒë√∫ng th√¨ return user (ho·∫∑c token tu·ª≥ √Ω b·∫°n)
    return { accessToken, refreshToken, ...pickUser(existUser) }
    // return existUser
  } catch (error) {
    throw error
  }
}

const refeshToken = async(clientRefreshToken) => {
  try {
    const refeshTokenDecoded = await jwtProvider.verifyToken(
      clientRefreshToken,
      env.REFRESH_TOKEN_SECRET_SIGNATURE)

    const userInfo = {
      _id: refeshTokenDecoded._id,
      email: refeshTokenDecoded.email
    }

    const accessToken = await jwtProvider.generateToken(
      userInfo,
      env.ACCESS_TOKEN_SECRET_SIGNATURE,
      env.ACCESS_TOKEN_LIFE
    )

    return { accessToken }
  } catch (error) {
    throw error
  }

}

const update = async(userId, reqBody, userAvatarFile) => {
  try {
    const existUser = await userModel.findOneById(userId)
    if (!existUser) throw new ApiError (StatusCodes.NOT_FOUND, 'Account not found!')
    if (existUser.isActive === false) {
      throw new ApiError(StatusCodes.NOT_ACCEPTABLE, 'Your account is not active!')
    }

    let updatedUser = { }
    // Tr∆∞·ªùng h·ª£p change password
    if (reqBody.current_password && reqBody.new_password) {
      //  ki·ªÉm tra xem passowrd hi·ªán t·∫°i c√≥ ƒë√∫ng hay ko
      if (!bcrypt.compareSync(reqBody.password, existUser.password)) {
        throw new ApiError(StatusCodes.NOT_ACCEPTABLE, 'Your current password is incorrect!')
      }
      // N·∫øu current_password ƒë√∫ng th√¨ ch√∫ng ta s·∫Ω hash 1 c√°i m·∫≠t kh·∫©u m·ªõi v√† update l·∫°i v√†o db
      updatedUser = await userModel.update(userId, {
        password:  bcryptjs.hashSync(reqBody.new_password, 8)
      })
    } else if (userAvatarFile) {
      // upload file l√™n clound l√™n storage
      const uploadResult = await CloundinaryProvider.streamUpload(userAvatarFile.buffer, 'users')
      console.log('üöÄ ~ update ~ uploadResult:', uploadResult)

      // L∆∞u l·∫°i url(secure_url) c·ªßa dile ·∫£nh trong db
      updatedUser = await userModel.update(userId, {
        avatar: uploadResult.secure_url
      })
    } else {
      //  Tr∆∞·ªùng h·ª£p update c√°c th√¥ng tin chung...
      updatedUser = await userModel.update(userId, {
        updatedUser: await userModel.update(existUser._id, reqBody)
      })
    }
    return pickUser (updatedUser)
  } catch (error) {
    throw error
  }

}

export const userServices = {
  createNew,
  verifyAccount,
  login,
  refeshToken,
  update
}